// !! GENERATED FILE - DO NOT MODIFY !!
//
// This file was generated by the 'sp-projects-util' tool.

pipeline {
    agent {
        node {
            label 'openjdk17'
        }
    }
    tools {
        maven 'Maven 3.X'
        jdk 'Local OpenJDK 17'
    }

    environment {
        MAVEN_OPTS = '-Dstyle.color=always -Djansi.force=true -Xms512m -Xmx1024m'
        POM_FILE = 'pom.xml'
        POM_VERSION = readMavenPom(file: 'pom.xml').getVersion()
        GIT_COMMITTER_NAME = "jenkins"
        GIT_COMMITTER_EMAIL = "jenkins@serviceplanet.nl"
    }

    options {
        ansiColor('xterm')
        buildDiscarder(logRotator(numToKeepStr: '20', artifactDaysToKeepStr: '1'))
    }

    stages {
        stage ('Initialize') {
            steps {
                sh '''
                    echo "PATH = ${PATH}"
                    echo "M2_HOME = ${M2_HOME}"
                    echo "JAVA_HOME = ${JAVA_HOME}"
                    echo "GIT_BRANCH = ${GIT_BRANCH}"
                    echo "POM_VERSION = ${POM_VERSION}"
                '''
            }
        }

        // This Jenkinsfile makes a distinction between builds that need to be deployed (building on branches such as
        // `master`, `release_X.X`, etc.) and builds that don't need to be deployed (diff's, PR's, individual commits,
        // etc.).

        stage('Build') {
            // Used for standalone builds such as diffs (PR's).

            options {
                timeout(time: 120, unit: "MINUTES")
            }

            when {
                not {
                    anyOf {
                        buildingTag();
                        // Means we are building a detached head. An arbitrary GIT reference.
                        branch '*'
                    }
                }
            }

            steps {
                withMaven() {
                    configFileProvider([configFile(fileId: 'c9fdc7cf-51b3-4248-95ba-511d36cc32c2', variable: 'MAVEN_SETTINGS_XML')]) {
                        // -U Flag forces re-resolution of all artifacts even if they couldn't be found previously.
                        // -B Flag enables batch mode. Disables spamming the logs with download progress among things.
                        //
                        // The maven goal 'install' is needed to install the pom in the local .m2 directory, so that it can
                        // be found and deployed.
                        sh 'mvn install -U -B -s $MAVEN_SETTINGS_XML -f $POM_FILE '
                    }
                }
            }

            post {
                always {
                    junit testResults: '**/target/surefire-reports/*.xml', allowEmptyResults: true
                }
            }
        }

        stage('Build and Publish') {
            // Used for continuous building and deploying of snapshot and release artifacts.
            //
            // It does the building and deploying in a single Maven step. This is the only way we can currently build
            // and deploy without having Maven build everything twice. Which is problematic for projects that take a
            // while to build. See the following for more information:
            //
            // * https://phabricator.serviceplanet.nl/T9728
            // * https://stackoverflow.com/questions/45739800/deploying-maven-artifacts-without-rebuilding

            options {
                timeout(time: 120, unit: "MINUTES")
            }

            when {
                // This must be the inverse of the 'Build' condition.
                anyOf {
                    // When building a tag publish it as a release.
                    buildingTag()
                    // When on master and release (ie. 'release_1.0') branches we only publish -SNAPSHOT artifacts.
                    // This prevents trying to publish release artifacts from these branches.
                    expression { GIT_BRANCH ==~ /(master|release_[0-9]*\.[0-9]*)/ }
                }
            }

            steps {
                withMaven() {
                    configFileProvider([configFile(fileId: 'c9fdc7cf-51b3-4248-95ba-511d36cc32c2', variable: 'MAVEN_SETTINGS_XML')]) {
                        // ID of the SonarQube instance as defined in the SonarQube plugin in Jenkins.
                        withSonarQubeEnv('serviceplanet-sonarqube') {
                            // Version of Sonar scanner comes from Service Planet Parent POM.
                            sh 'mvn clean install sonar:sonar deploy -Dsonar.branch.name=${GIT_BRANCH} -B -s $MAVEN_SETTINGS_XML -f $POM_FILE '
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                step([$class: 'PhabricatorNotifier', commentOnSuccess: true, commentWithConsoleLinkOnFailure: true, uberallsEnabled: false])
            }
        }

        cleanup{
            // Wipeout the entire workspace.
            deleteDir()
        }
    }
}
